// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeChannel upgrade channel
//
// swagger:model upgrade-channel
type UpgradeChannel struct {

	// channels
	// Required: true
	Channels []string `json:"channels"`

	// The CPU architecture of the image.
	// Required: true
	// Enum: [x86_64 aarch64 arm64 ppc64le s390x multi]
	CPUArchitecture *string `json:"cpu_architecture" gorm:"default:'x86_64'"`
}

// Validate validates this upgrade channel
func (m *UpgradeChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeChannelChannelsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable","candidate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeChannelChannelsItemsEnum = append(upgradeChannelChannelsItemsEnum, v)
	}
}

func (m *UpgradeChannel) validateChannelsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeChannelChannelsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeChannel) validateChannels(formats strfmt.Registry) error {

	if err := validate.Required("channels", "body", m.Channels); err != nil {
		return err
	}

	for i := 0; i < len(m.Channels); i++ {

		// value enum
		if err := m.validateChannelsItemsEnum("channels"+"."+strconv.Itoa(i), "body", m.Channels[i]); err != nil {
			return err
		}

	}

	return nil
}

var upgradeChannelTypeCPUArchitecturePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86_64","aarch64","arm64","ppc64le","s390x","multi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeChannelTypeCPUArchitecturePropEnum = append(upgradeChannelTypeCPUArchitecturePropEnum, v)
	}
}

const (

	// UpgradeChannelCPUArchitectureX8664 captures enum value "x86_64"
	UpgradeChannelCPUArchitectureX8664 string = "x86_64"

	// UpgradeChannelCPUArchitectureAarch64 captures enum value "aarch64"
	UpgradeChannelCPUArchitectureAarch64 string = "aarch64"

	// UpgradeChannelCPUArchitectureArm64 captures enum value "arm64"
	UpgradeChannelCPUArchitectureArm64 string = "arm64"

	// UpgradeChannelCPUArchitecturePpc64le captures enum value "ppc64le"
	UpgradeChannelCPUArchitecturePpc64le string = "ppc64le"

	// UpgradeChannelCPUArchitectureS390x captures enum value "s390x"
	UpgradeChannelCPUArchitectureS390x string = "s390x"

	// UpgradeChannelCPUArchitectureMulti captures enum value "multi"
	UpgradeChannelCPUArchitectureMulti string = "multi"
)

// prop value enum
func (m *UpgradeChannel) validateCPUArchitectureEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeChannelTypeCPUArchitecturePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeChannel) validateCPUArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("cpu_architecture", "body", m.CPUArchitecture); err != nil {
		return err
	}

	// value enum
	if err := m.validateCPUArchitectureEnum("cpu_architecture", "body", *m.CPUArchitecture); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgrade channel based on context it is used
func (m *UpgradeChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeChannel) UnmarshalBinary(b []byte) error {
	var res UpgradeChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
