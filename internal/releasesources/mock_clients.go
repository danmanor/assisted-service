// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package releasesources is a generated GoMock package.
package releasesources

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOpenShiftReleasesAPIClientInterface is a mock of OpenShiftReleasesAPIClientInterface interface.
type MockOpenShiftReleasesAPIClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftReleasesAPIClientInterfaceMockRecorder
}

// MockOpenShiftReleasesAPIClientInterfaceMockRecorder is the mock recorder for MockOpenShiftReleasesAPIClientInterface.
type MockOpenShiftReleasesAPIClientInterfaceMockRecorder struct {
	mock *MockOpenShiftReleasesAPIClientInterface
}

// NewMockOpenShiftReleasesAPIClientInterface creates a new mock instance.
func NewMockOpenShiftReleasesAPIClientInterface(ctrl *gomock.Controller) *MockOpenShiftReleasesAPIClientInterface {
	mock := &MockOpenShiftReleasesAPIClientInterface{ctrl: ctrl}
	mock.recorder = &MockOpenShiftReleasesAPIClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenShiftReleasesAPIClientInterface) EXPECT() *MockOpenShiftReleasesAPIClientInterfaceMockRecorder {
	return m.recorder
}

// GetReleases mocks base method.
func (m *MockOpenShiftReleasesAPIClientInterface) GetReleases(channel, openshiftVersion, cpuArchitecture string) (*ReleaseGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleases", channel, openshiftVersion, cpuArchitecture)
	ret0, _ := ret[0].(*ReleaseGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleases indicates an expected call of GetReleases.
func (mr *MockOpenShiftReleasesAPIClientInterfaceMockRecorder) GetReleases(channel, openshiftVersion, cpuArchitecture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleases", reflect.TypeOf((*MockOpenShiftReleasesAPIClientInterface)(nil).GetReleases), channel, openshiftVersion, cpuArchitecture)
}

// getEndpoint mocks base method.
func (m *MockOpenShiftReleasesAPIClientInterface) getEndpoint(channel, openshiftVersion, cpuArchitecture string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEndpoint", channel, openshiftVersion, cpuArchitecture)
	ret0, _ := ret[0].(string)
	return ret0
}

// getEndpoint indicates an expected call of getEndpoint.
func (mr *MockOpenShiftReleasesAPIClientInterfaceMockRecorder) getEndpoint(channel, openshiftVersion, cpuArchitecture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEndpoint", reflect.TypeOf((*MockOpenShiftReleasesAPIClientInterface)(nil).getEndpoint), channel, openshiftVersion, cpuArchitecture)
}

// parseResponse mocks base method.
func (m *MockOpenShiftReleasesAPIClientInterface) parseResponse(response *http.Response) (*ReleaseGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parseResponse", response)
	ret0, _ := ret[0].(*ReleaseGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// parseResponse indicates an expected call of parseResponse.
func (mr *MockOpenShiftReleasesAPIClientInterfaceMockRecorder) parseResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parseResponse", reflect.TypeOf((*MockOpenShiftReleasesAPIClientInterface)(nil).parseResponse), response)
}

// MockOpenShiftSupportLevelAPIClientInterface is a mock of OpenShiftSupportLevelAPIClientInterface interface.
type MockOpenShiftSupportLevelAPIClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder
}

// MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder is the mock recorder for MockOpenShiftSupportLevelAPIClientInterface.
type MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder struct {
	mock *MockOpenShiftSupportLevelAPIClientInterface
}

// NewMockOpenShiftSupportLevelAPIClientInterface creates a new mock instance.
func NewMockOpenShiftSupportLevelAPIClientInterface(ctrl *gomock.Controller) *MockOpenShiftSupportLevelAPIClientInterface {
	mock := &MockOpenShiftSupportLevelAPIClientInterface{ctrl: ctrl}
	mock.recorder = &MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenShiftSupportLevelAPIClientInterface) EXPECT() *MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder {
	return m.recorder
}

// GetSupportLevels mocks base method.
func (m *MockOpenShiftSupportLevelAPIClientInterface) GetSupportLevels(openshiftMajorVersion string) (*SupportLevelGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportLevels", openshiftMajorVersion)
	ret0, _ := ret[0].(*SupportLevelGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportLevels indicates an expected call of GetSupportLevels.
func (mr *MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder) GetSupportLevels(openshiftMajorVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportLevels", reflect.TypeOf((*MockOpenShiftSupportLevelAPIClientInterface)(nil).GetSupportLevels), openshiftMajorVersion)
}

// getEndpoint mocks base method.
func (m *MockOpenShiftSupportLevelAPIClientInterface) getEndpoint(openshiftMajorVersion string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEndpoint", openshiftMajorVersion)
	ret0, _ := ret[0].(string)
	return ret0
}

// getEndpoint indicates an expected call of getEndpoint.
func (mr *MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder) getEndpoint(openshiftMajorVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEndpoint", reflect.TypeOf((*MockOpenShiftSupportLevelAPIClientInterface)(nil).getEndpoint), openshiftMajorVersion)
}

// parseResponse mocks base method.
func (m *MockOpenShiftSupportLevelAPIClientInterface) parseResponse(response *http.Response) (*SupportLevelGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parseResponse", response)
	ret0, _ := ret[0].(*SupportLevelGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// parseResponse indicates an expected call of parseResponse.
func (mr *MockOpenShiftSupportLevelAPIClientInterfaceMockRecorder) parseResponse(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parseResponse", reflect.TypeOf((*MockOpenShiftSupportLevelAPIClientInterface)(nil).parseResponse), response)
}
